async function performRobustLogin(env) {
  try {
    console.log('🔐 Starting login process...');
    
    // 1. ログインページを取得
    const loginPageResponse = await fetch('https://www.comisapolive.com/login/', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ja,en-US;q=0.9,en;q=0.8'
      }
    });
    
    if (!loginPageResponse.ok) {
      return { success: false, error: `Login page failed: ${loginPageResponse.status}` };
    }
    
    const loginPageHtml = await loginPageResponse.text();
    const loginPageCookies = loginPageResponse.headers.get('set-cookie') || '';
    
    // 2. フォーム情報を抽出
    const csrfToken = extractCSRFToken(loginPageHtml);
    const hiddenFields = extractHiddenFields(loginPageHtml);
    const actionUrl = extractFormAction(loginPageHtml) || 'https://www.comisapolive.com/login/';
    
    console.log('📝 Form analysis complete:', {
      csrf: !!csrfToken,
      hidden: Object.keys(hiddenFields).length,
      action: actionUrl.includes('login')
    });
    
    // 3. ログインデータを準備
    const loginData = new URLSearchParams();
    
    // 環境変数から認証情報を取得（fallback付き）
    const email = env.LOGIN_ID || 'comisapolive@gmail.com';
    const password = env.LOGIN_PASSWORD || 'cord3cord3';
    
    // 複数のフィールド名パターンを試行
    const emailFields = ['email', 'username', 'login_id', 'user_email', 'mail'];
    const passwordFields = ['password', 'passwd', 'pass', 'login_password'];
    
    emailFields.forEach(field => {
      loginData.append(field, email);
    });
    
    passwordFields.forEach(field => {
      loginData.append(field, password);
    });
    
    // CSRF対応
    if (csrfToken) {
      const csrfFields = ['csrf_token', '_token', 'authenticity_token', 'csrfmiddlewaretoken'];
      csrfFields.forEach(field => {
        loginData.append(field, csrfToken);
      });
    }
    
    // hidden フィールド追加
    Object.entries(hiddenFields).forEach(([name, value]) => {
      loginData.append(name, value);
    });
    
    // 4. ログイン実行
    const loginResponse = await fetch(actionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Referer': 'https://www.comisapolive.com/login/',
        'Origin': 'https://www.comisapolive.com',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Cookie': loginPageCookies
      },
      body: loginData.toString(),
      redirect: 'manual'
    });
    
    const loginResponseCookies = loginResponse.headers.get('set-cookie') || '';
	const allCookies = combineCookies(loginPageCookies, loginResponseCookies);

	// デバッグ情報を追加
	console.log('🔍 Login response analysis:', {
	status: loginResponse.status,
	url: loginResponse.url,
	hasSetCookie: !!loginResponseCookies,
	cookieLength: loginResponseCookies.length,
	totalCookieLength: allCookies.length
	});

	// 5. 成功判定
	let success = false;
	let method = '';
    
    // リダイレクト判定
    if (loginResponse.status >= 300 && loginResponse.status < 400) {
	const location = loginResponse.headers.get('location');
	console.log('📍 Redirect detected:', { 
		location, 
		hasLogin: location?.includes('login'),
		hasError: location?.includes('error')
	});
	
	if (location && !location.includes('login') && !location.includes('error')) {
		success = true;
		method = 'redirect';
	}
	}
    
    // レスポンス内容判定
	if (!success) {
	const loginResponseText = await loginResponse.text();
	console.log('📄 Response preview (first 300 chars):', loginResponseText.substring(0, 300));
	console.log('📊 Response length:', loginResponseText.length);
	
	const successPatterns = ['dashboard', 'マイページ', 'ログアウト', 'menu', 'profile', 'liver', '設定', 'ホーム', 'アカウント'];
	const failurePatterns = ['ログインに失敗', 'パスワードが間違', '認証に失敗', 'error', 'エラー', 'ログイン画面', 'パスワード', 'メールアドレス'];
	
	const hasSuccess = successPatterns.some(pattern => 
		loginResponseText.toLowerCase().includes(pattern.toLowerCase())
	);
	const hasFailure = failurePatterns.some(pattern => 
		loginResponseText.toLowerCase().includes(pattern.toLowerCase())
	);
	
	console.log('🎯 Pattern matching:', { 
		hasSuccess, 
		hasFailure,
		foundSuccess: successPatterns.filter(p => loginResponseText.toLowerCase().includes(p.toLowerCase())),
		foundFailure: failurePatterns.filter(p => loginResponseText.toLowerCase().includes(p.toLowerCase()))
	});
	
	if (hasSuccess && !hasFailure) {
		success = true;
		method = 'content';
	}
	}
    
    // Cookie判定
    if (!success && allCookies.length > loginPageCookies.length) {
      const sessionPatterns = ['session', 'auth', 'login', 'token', 'user'];
      const hasSessionCookie = sessionPatterns.some(pattern =>
        allCookies.toLowerCase().includes(pattern)
      );
      
      if (hasSessionCookie) {
        success = true;
        method = 'cookie';
      }
    }

	// より緩い成功判定（最後の手段）
	if (!success && loginResponse.status === 200) {
	const loginResponseText = await loginResponse.text();
	// ログインページの特徴がない場合は成功とみなす
	if (!loginResponseText.includes('パスワード') && 
		!loginResponseText.includes('ログイン') && 
		loginResponseText.length > 1000) {
		success = true;
		method = 'fallback';
		console.log('🎲 Using fallback success detection - no login indicators found');
	}
	}
    
    console.log(`🔐 Login result: ${success ? '✅ SUCCESS' : '❌ FAILED'} (${method})`);
    
    return {
      success,
      cookies: allCookies,
      method,
      error: success ? null : 'Login failed - no success indicators found'
    };
    
  } catch (error) {
    console.error('Login error:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

function extractCSRFToken(html) {
  let match = html.match(/<meta[^>]*name=["\']csrf-token["\'][^>]*content=["\']([^"\']*)["\'][^>]*>/i);
  if (match) return match[1];
  
  match = html.match(/<meta[^>]*content=["\']([^"\']*)["\'][^>]*name=["\']csrf-token["\'][^>]*>/i);
  if (match) return match[1];
  
  match = html.match(/<input[^>]*name=["\']csrf_token["\'][^>]*value=["\']([^"\']*)["\'][^>]*>/i);
  if (match) return match[1];
  
  match = html.match(/<input[^>]*name=["\']_token["\'][^>]*value=["\']([^"\']*)["\'][^>]*>/i);
  if (match) return match[1];
  
  return null;
}

function extractHiddenFields(html) {
  const hiddenFields = {};
  const pattern = /<input[^>]*type=["\']hidden["\'][^>]*>/gi;
  let match;
  
  while ((match = pattern.exec(html)) !== null) {
    const input = match[0];
    const nameMatch = input.match(/name=["\']([^"\']*)["\']/i);
    const valueMatch = input.match(/value=["\']([^"\']*)["\']/i);
    
    if (nameMatch && valueMatch) {
      hiddenFields[nameMatch[1]] = valueMatch[1];
    }
  }
  
  return hiddenFields;
}

function extractFormAction(html) {
  const match = html.match(/<form[^>]*action=["\']([^"\']*)["\'][^>]*>/i);
  if (match) {
    const action = match[1];
    return action.startsWith('/') ? `https://www.comisapolive.com${action}` : action;
  }
  return null;
}

function combineCookies(cookies1, cookies2) {
  console.log('🍪 Raw cookies1:', cookies1);
  console.log('🍪 Raw cookies2:', cookies2);
  
  let finalCookies = '';
  
  if (cookies2 && cookies2.includes('SESS_PUBLISH')) {
    // cookies2から最新のSESS_PUBLISHを抽出
    const sessMatches = cookies2.match(/SESS_PUBLISH=([^;,]+)/g);
    if (sessMatches && sessMatches.length > 0) {
      // 最後のマッチを使用
      finalCookies = sessMatches[sessMatches.length - 1];
      console.log('🍪 Using latest SESS_PUBLISH:', finalCookies);
    }
  } else if (cookies1 && cookies1.includes('SESS_PUBLISH')) {
    // cookies1から抽出
    const sessMatch = cookies1.match(/SESS_PUBLISH=([^;,]+)/);
    if (sessMatch) {
      finalCookies = `SESS_PUBLISH=${sessMatch[1]}`;
      console.log('🍪 Using cookies1 SESS_PUBLISH:', finalCookies);
    }
  }
  
  return finalCookies;
}